<?php

$HOME = (! isset($HOME)) ? __DIR__ . '/../../../..' : $HOME;
define('_HOME', $HOME);
unset($HOME);

const _SRC = _HOME . '/src';
const _TMP = _HOME . '/tmp';
const _CACHE_VIEWS = _TMP . '/views';
const _TESTS = _HOME . '/tests';
const _PUBLIC = _HOME . '/public';
const _APP = _SRC . '/App';
const _CONTROLLERS = _APP . '/Controllers';
const _ENTITIES = _APP . '/Entities';
const _SERVICES = _APP . '/Services';
const _MIDDLEWARES = _SRC . '/middlewares';
const _ROUTES = _SRC . '/routes';
const _Util = _SRC . '/Util';
const _VALIDATORS = _Util . '/Validators';
const _VIEWS = _SRC . '/views';

/**
 * Recursive remove directory
 * @param string $dir
 */
function rrmDir($dir) {
    if (is_dir($dir)) {
        $objects = scandir($dir);
        foreach ($objects as $object) {
            if ($object != "." && $object != "..") {
                if (is_dir($dir. DIRECTORY_SEPARATOR .$object) && !is_link($dir."/".$object))
                    rrmDir($dir. DIRECTORY_SEPARATOR .$object);
                else
                    unlink($dir. DIRECTORY_SEPARATOR .$object);
            }
        }
        rmdir($dir);
    }
}

class ConsoleOption {
    const EOF = "\n";

    const OPTIONS = [
        'foreground' => [
            'bold'         => '1',    'dim'          => '2',
            'black'        => '0;30', 'dark_gray'    => '1;30',
            'blue'         => '0;34', 'light_blue'   => '1;34',
            'green'        => '0;32', 'light_green'  => '1;32',
            'cyan'         => '0;36', 'light_cyan'   => '1;36',
            'red'          => '0;31', 'light_red'    => '1;31',
            'purple'       => '0;35', 'light_purple' => '1;35',
            'brown'        => '0;33', 'yellow'       => '1;33',
            'light_gray'   => '0;37', 'white'        => '1;37',
            'normal'       => '0;39',
        ],

        'background' => [
            'black'        => '40',   'red'          => '41',
            'green'        => '42',   'yellow'       => '43',
            'blue'         => '44',   'magenta'      => '45',
            'cyan'         => '46',   'light_gray'   => '47',
        ],

        'option' => [
            'underline'    => '4',    'blink'         => '5',
            'reverse'      => '7',    'hidden'        => '8',
        ]
    ];
}

class Console {
    private $args;
    private $help;

    function __construct()
    {
        $this->args = [];
        $this->help = [['Undefined']];
    }

    /**
     * @param array $arguments
     * @param string|null $delimiter
     */
    function setArgs(array $arguments, $delimiter = null)
    {
        $args = $arguments;
        if(gettype($delimiter) == 'string') {
            $args = [];
            for ($i = 1; $i < count($arguments); $i++) {
                $arg_split = explode($delimiter, $arguments[$i]);
                if(count($arg_split) == 1) $arg_split[1] = $arguments[$i];
                $args[$arg_split[0]] = $arg_split[1];
            }
        }

        $this->args = $args;
    }

    /**
     * @param string $name
     * @param string $value
     */
    function setArg($name, $value)
    {
        $this->args[$name] = $value;
    }

    /**
     * @param string ...$names
     * @return string|null
     */
    function getArg(...$names)
    {
        $args = (array_filter(array_keys($this->args), function($key) use ($names) { return in_array($key, $names); }));
        return (count($args) > 0) ? $this->args[ array_shift($args) ] : null;
    }

    /**
     * @param string|null $text
     * @param bool $print
     * @param array $options
     * @return array
     */
    function out($text, $print = true, $options = [])
    {
        if($print) {
            $EOF = ConsoleOption::EOF;
            $finalText = $EOF;
            if($text != null) {
                $finalText = '';
                if(count($options) !== 0) {
                    foreach ($options as $index => $value) {
                        switch($index) {
                            case 'foreground':
                            case 'background':
                            case 'option':
                                $option = ConsoleOption::OPTIONS[ $index ][ $value ];
                                $finalText .= "\033[{$option}m";
                                break;
                        }
                    }

                    $finalText .= "$text\033[0m";
                }
                else {
                    $finalText = $text;
                }

                $finalText = "$finalText$EOF";
            }

            echo $finalText;
        }

        return [$text, $options];
    }

    function arrayOut(array $outs)
    {
        foreach ($outs as $out) {
            $text = null;
            $options = [];
            if(isset($out[0])) $text = $out[0];
            if(isset($out[1])) $options = $out[1];

            $this->out($text, true, $options);
        }
    }

    /**
     * @param string|null $header
     * @param string|null $footer
     * @param array $commands
     */
    function setHelp($header, $footer, array $commands)
    {
        $lines = [
            [ "\t\t==== HELP ====", [ 'foreground' => 'white', 'background' => 'cyan' ] ],
            [ $header ],
            [], // new line
            [ 'Commands', [ 'foreground' => 'green', 'option' => 'underline' ] ],
        ];
        foreach ($commands as $command) {
            $lines[] = [ "\t{$command[0]}", [ 'foreground' => 'black' ] ];
            foreach ($command[1] as $text) {
                $lines[] = [ "\t\t{$text}" ];
            }
        }
        $lines[] = [ $footer ];
        $this->help = $lines;
    }

    function printHelp()
    {
        $this->arrayOut($this->help);
    }

    /**
     * @param string $text
     * @param bool $success
     * @param string|null $prefix
     */
    function check($text, $success = true, $prefix = "\t")
    {
        $symbol = ($success) ? "\xe2\x9c\x93" : "\xe2\x9c\x97";
        $this->out("{$prefix}[{$symbol}]\t{$text}", true, []);
    }

    /**
     * @param $dir_path
     * @param array $options
     */
    function dir($dir_path, $options = [ 'delete' => false, 'recursive' => false, 'print' => true ])
    {
        try {
            $dirname = basename($dir_path);
            $success = true;
            $type = "Create";
            if(is_dir($dir_path)) {
                if(isset($options['delete']) && $options['delete']) {
                    $type = "Remove";
                    if(isset($options['recursive']) && $options['recursive']) {
                        rrmDir($dir_path);
                    }
                    else if(! rmdir($dir_path)) {
                        $success = false;
                    }
                }
            }
            else if(! mkdir($dir_path)) {
                $success = false;
            }

            if(isset($options['print']) && $options['print']) {
                $this->check("$type directory ($dirname)", $success);
            }
        }
        catch (Exception $e) {
            //
        }

    }
}

class PhpClassGenerator {
    private $namespace;
    private $implementations;
    private $extension;
    private $uses;

    private $name;
    private $functions;

    function __construct($name = null)
    {
        $this->name = $name;
        $this->namespace = null;
        $this->implementations = [];
        $this->extension = [];
        $this->functions = [];
        $this->uses = [];
    }

    /**
     * @param string $name
     * @return $this
     */
    function setName($name)
    {
        $this->name = $name;
        return $this;
    }

    /**
     * @param string $namespace
     * @return PhpClassGenerator
     */
    function setNamespace($namespace)
    {
        $this->namespace = $namespace;
        return $this;
    }

    /**
     * @param string $class
     * @return PhpClassGenerator
     */
    function addImplementation($class)
    {
        $this->implementations[$class] = $class;
        return $this;
    }

    /**
     * @param string $class
     * @return PhpClassGenerator
     */
    function setExtension($class)
    {
        $this->extension = $class;
        return $this;
    }

    /**
     * @param string $class
     * @return $this
     */
    function addUse($class)
    {
        $this->uses[$class] = $class;
        return $this;
    }

    function addFunction($name, $protection = null, ...$params)
    {
        $this->functions[$name] = [
            'name' => $name,
            'protection' => $protection,
            'params' => $params,
            'code' => []
        ];
        return $this;
    }

    /**
     * @param string $name
     * @param string[] $code
     */
    function setCodeFunction($name, array $code)
    {
        $this->functions[$name]['code'] = $code;
    }

    function __toString()
    {
        $code = "<?php\n\n";
        if($this->namespace != null) $code .= "namespace {$this->namespace};\n\n";
        foreach ($this->uses as $use) {
            $code .= "use {$use};\n";
        }
        $code .= "\nclass {$this->name}";
        if($this->extension != null) {
            $code .= " extends {$this->extension}";
        }
        if(count($this->implementations) > 0) {
            $implementations = implode(', ', $this->implementations);
            $code .= " implements $implementations";
        }
        $code .= "\n{\n";
        foreach ($this->functions as $function) {
            $params = implode(', ', $function['params']);
            $code .= "\tfunction {$function['name']}($params)\n\t{\n";
            if(count($function['code']) > 0) {
                foreach ($function['code'] as $line) {
                    $code .= "\t\t$line\n";
                }
            }
            else {
                $code .= "\t\t// TODO: Implement {$function['name']}() method.\n";
            }
            $code .= "\t}\n\n";
        }

        $code .= "}\n";
        return $code;
    }

    function save($path, $name)
    {
        file_put_contents($path . DIRECTORY_SEPARATOR . $name . '.php', $this->__toString());
    }
}

/**
 * @param string $name
 * @return PhpClassGenerator
 */
function generateController($name)
{
    $class = new PhpClassGenerator();
    $class->setName($name . 'Controller')
        ->setNamespace('App\Controllers')
        ->addImplementation('Controller')
        ->addUse('Jet\Controller\Controller')
        ->addUse('Jet\Request\Request')
        ->addUse('Jet\Request\Response')
        ->addFunction('index', null, 'Request $req', 'Response $res')
        ->addFunction('new_', null, 'Request $req', 'Response $res')
        ->addFunction('create', null, 'Request $req', 'Response $res')
        ->addFunction('show', null, 'Request $req', 'Response $res')
        ->addFunction('edit', null, 'Request $req', 'Response $res')
        ->addFunction('update', null, 'Request $req', 'Response $res')
        ->addFunction('destroy', null, 'Request $req', 'Response $res');

    return $class;
}

function generateEntity($name)
{
    $class = new PhpClassGenerator();
    $class->setName($name)
        ->setNamespace('App\Entities')
        ->setExtension('Entity')
        ->addUse('Jet\Db\Entity')
        ->addUse('Jet\Db\Connection')
        ->addUse("Util\\Validators\\{$name}Validator")
        ->addFunction('__construct', null, 'Connection $db')
        ->addFunction('save', null, '$data = []', '$where = null')
        ->setCodeFunction('__construct', [
            'parent::__construct($db);',
            '$this->_validator = new ' . $name . 'Validator();',
            '$this->_tableName = \'' . $name . '\';'
        ]);

    return $class;
}

/**
 * Generate a random string
 * @param int $length
 * @return string
 */
function randomString($length = 10) {
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $charactersLength = strlen($characters);
    $randomString = '';
    for ($i = 0; $i < $length; $i++) {
        $randomString .= $characters[rand(0, $charactersLength - 1)];
    }
    return $randomString;
}

$console = new Console();
$console->setArgs($argv, '=');

$commands = [
    [ 'help', [ 'Ver este listado' ] ],
    [ 'init', [ 'Inicializar proyecto', 'Crea los directorios y estructura del proyecto' ] ],
    [ 'controller=<name>', [ 'Genera una clase `Controller`' ] ],
    [ 'entity=<name>', [ 'Genera una clase `Entity`'] ],
    [ 'service=<name>', [ 'Genera una clase `Service`' ] ]
];

$console->setHelp('Jet Framework Cli - version 0.1', null, $commands);

if(($argValue = $console->getArg('help', '-h')) != null) {
    $console->printHelp();
    return;
}

if($console->getArg('init') != null) {
    $console->dir(_SRC);
    $console->dir(_TMP);
    $console->dir(_CACHE_VIEWS);
    $console->dir(_TESTS);
    $console->dir(_PUBLIC);
    $console->dir(_APP);
    $console->dir(_CONTROLLERS);
    $console->dir(_ENTITIES);
    $console->dir(_SERVICES);
    $console->dir(_MIDDLEWARES);
    $console->dir(_ROUTES);
    $console->dir(_Util);
    $console->dir(_VALIDATORS);
    $console->dir(_VIEWS);

    $env_code = <<<'CODE'
<?php

return [
    // Enverioments Vars ($_ENV)
    'gloval' => [
        'mode' => 'development',
        # 'mail_email' => 'contact@test.net',
        # 'mail_username' => 'Contact'
    ],
    
    'autoload' => [
        __DIR__ . '/src/middlewares',
        __DIR__ . '/src/App/Entities',
        __DIR__ . '/src/App/Services',
        __DIR__ . '/src/App/Controllers',
    ],
    
    'services' => [
        # [  id,     className,    arguments ]
        # [ 'Mail', 'MailService', [ '$gloval.mail_email', '$gloval.mail_username' ] ], # `$gloval` uses gloval array
    ],
    
    'security' => [
        'secret' => '::secret::',
        'request_sanitizer' => false, // auto sanitize request body and query
    ],
    
    'views' => [
        'path' => __DIR__ . '/src/views',
        'cache' => [
            'allow' => false,
            'path' => __DIR__ . '/tmp/views',
            'time' => '+7 day'
        ]
    ],
    
    'db' => [
        'development' => [
            'driver'   => 'pdo_mysql',  // PDO driver
            'user'     => 'root',
            'password' => null,
            'dbname'   => 'jet_db',
            'host'     => '127.0.0.1',
            'port'     => null          // default port
        ],
        'testing' => [
        ],
        'production' => [
        ]
    ]
];

CODE;
    $env_code = str_replace('::secret::', randomString(15), $env_code);

    $index_code = <<<'CODE'
<?php

require_once __DIR__ . '/../bootstrap.php';

CODE;
    $bootstrap_code = <<<'CODE'
<?php

require_once __DIR__ . '/vendor/autoload.php';

$env = require_once __DIR__ .'/env.php';

$db = new Jet\Db\Connection($env['db'][ $env['gloval']['mode'] ]['driver']);
if(! $db->connect(
    $env['db'][ $env['gloval']['mode'] ]['dbname'],
    $env['db'][ $env['gloval']['mode'] ]['user'],
    $env['db'][ $env['gloval']['mode'] ]['password'],
    $env['db'][ $env['gloval']['mode'] ]['host'],
    $env['db'][ $env['gloval']['mode'] ]['port']
))
{
    $error = $db->getLastException();
    echo 'Connection error: ' . $error->getMessage();
    exit(1);
}

require_once __DIR__ . '/src/app.php';

CODE;
    $app_code = <<<'CODE'
<?php

global $env;

$homeRoutes = require __DIR__ . '/routes/home.php';

$app = new Jet\App();
$app->configure($env);

$app->addRoutes($homeRoutes);

$app->ready();

CODE;
    $htaccess = <<<'CONFIG'
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Handle Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>
CONFIG;
    $home_routes = <<<'CODE'
<?php

$router = new AltoRouter();

$router->map('GET', '/', [ '\App\Controllers\Home@index' ], 'home');

return $router;
CODE;
    $jet_code = <<<'CODE'
<?php

require __DIR__ . '/vendor/harstat/jet-framework/bin/jet';
CODE;

    if(! is_file(_HOME . '/jet'))
        file_put_contents(_HOME . '/jet', $jet_code);

    file_put_contents(_HOME . '/env.php', $env_code);
    file_put_contents(_HOME . '/bootstrap.php', $bootstrap_code);
    file_put_contents(_PUBLIC . '/index.php', $index_code);
    file_put_contents(_SRC . '/app.php', $app_code);
    file_put_contents(_PUBLIC . '/.htaccess', $htaccess);
    file_put_contents(_ROUTES . '/home.php', $home_routes);

    $controller = generateController('Home');
    $controller->setCodeFunction('index', [
        '$res->send(\'Home\')',
        "\n->end();"
    ]);
    $controller->save(_CONTROLLERS, 'HomeController');

    $console->setArg('controller', 'Home');
    $console->setArg('entity', 'User');

    $console->arrayOut([
        [],
        [ '* Para capturar y hacer seguimiento de errores te recomendamos utilizar filp/whoops (https://filp.github.io/whoops/)', [ 'foreground' => 'light_gray' ] ],
        [],
        [ 'Listo!', [ 'foreground' => 'bold' ] ],
    ]);
}

if(($argValue = $console->getArg('controller', '-c')) != null) {
    $controller = generateController($argValue);
    $controller->save(_CONTROLLERS, $argValue. 'Controller');
}

if(($argValue = $console->getArg('entity', '-e')) != null) {
    $entity = generateEntity($argValue);
    $entity->save(_ENTITIES, $argValue);
    $console->setArg('validator', $argValue);
}

if(($argValue = $console->getArg('validator', '-v')) != null) {
    $class = new PhpClassGenerator();
    $class->setName($argValue . 'Validator')
        ->setNamespace('Util\Validators')
        ->addFunction('validate', null, 'array $data');

    $class->save(_VALIDATORS, $argValue . 'Validator');
}
